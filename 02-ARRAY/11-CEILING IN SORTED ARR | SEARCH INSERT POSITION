
https://leetcode.com/problems/search-insert-position/description/
---------------------------------------------
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

Input: nums = [1,3,5,6], target = 5
Output: 2

Input: nums = [1,3,5,6], target = 2
Output: 1

Input: nums = [1,3,5,6], target = 7
Output: 4
=====================O(log n)============

class Solution {
    public int searchInsert(int[] nums, int target) {
        //assumend that sorted array is in asec order

        int start = 0; 
        int end = nums.length -1;

        //edge case  -> if target is greater than the nums[nums.length] start index is 
        while(start <= end)
        {
           int mid = start + (end - start) / 2;
           if (target < nums[mid])
            {
                end = mid -1 ;
            }
            else if(target > nums[mid])
            {
                start = mid + 1 ;
            }
            else if(target == nums[mid])
            {
                return mid;
            }
        }
        return start ;
    }
}

==================== O(n) ================

class Solution {
    public int searchInsert(int[] nums, int target) {
        for(int i=0; i<nums.length ; i++)
        {
            while(target <= nums[i])
            {
                return i;
            }
        }
        return nums.length;
    }
}
