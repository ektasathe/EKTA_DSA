Input: arr[] = [1, 2, 2, 3, 4], x = 2
Output: [1,2] //ie. at what index the no 2 is present

================  USING ARRAYLIST  WAY 1 ==============
class Solution {
    static int search(int arr[], int x) {
        // Your code here
        return helper(arr,x,0);
        
    }
    static ArrayList<Integer> list = new ArrayList<>();
    private static int helper(int arr[],int target, int index) //here main funciton is static INT so the helper function should be private static INT
    {
        if(index == arr.length)
        {
            return ; //when we have reached at the end then we are returning the arraylist
        }
        if(arr[index] == target)
        {
            list.add(index);
        }
        else{
            helper(arr,target,index+1);
        }
        
    }
}

================  USING ARRAYLIST  WAY 2 ==============
class Solution {
    static int search(int arr[], int x) {
        // Your code here
        return helper(arr,x,0);
        
    }
 static ArrayList<Integer> helper(int[] arr, int target, int index, ArrayList<Integer> list) {
        if (index == arr.length) {
            return list;
        }
        if (arr[index] == target) {
            list.add(index);
        }
        return helper(arr, target, index + 1, list);
    }
}
    
================  USING ARRAYLIST  WAY 3 ==============
class Solution {
    static int search(int arr[], int x) {
        // Your code here
        return helper(arr,x,0);
        
    }
static ArrayList<Integer> helper(int[] arr, int target, int index) {

        ArrayList<Integer> list = new ArrayList<>();

        if (index == arr.length) {
            return list;
        }

        // this will contain answer for that function call only
        if (arr[index] == target) {
            list.add(index);
        }
        ArrayList<Integer> ansFromBelowCalls = helper(arr, target, index + 1);

        list.addAll(ansFromBelowCalls);

        return list;
    }
}
