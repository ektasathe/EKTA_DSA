Input: arr[] = [1, 2, 2, 3, 4], x = 2
Output: [1,2] //ie. at what index the no 2 is present


RECURSIVE TREE
[1, 2, 2, 3, 4]

Pramaters ([1, 2, 2, 3, 4], 2, 0)
point one : if(arr[0index] == target)
            if ( arr[0] == 2 ) --> false  &&  base cond is not satisfied

Paramaters : return ( [2,2,3,4] , 2 , 1)
------------------------------------------------------------------
Point 2 : if(arr[index] == target)
          if(arr[1] == 2) -----> true so add it in the list. &&  base cond is not satisfied
          list[index] = list[1]

paramater return ([2,3,4] , 2 , 2)
------------------------------------------------------------------
Point 3 : if(arr[index] == target)
          if(arr[2] == 2) -----> true so add it in the list. &&  base cond is not satisfied
          list[index, index] = list[1,2]

paramater return ([3,4] , 2 , 3)
------------------------------------------------------------------
 Point 4 : if(arr[index] == target)
        if(arr[3] == 2) -----> false &&  base cond is not satisfied

paramater return ([4] , 2 , 4) 
------------------------------------------------------------------
 Point 3 : if(arr[index] == target)
           if(arr[4] == 2) -----> false
       
paramater return ([] , 2 , 4) 
          here if(index == arr.length) //checking for base condition
               if(5 == 5 ) --> break the recursive function call

------------------------------------------------------------------
**IMP** In the function , the paramaters that we are passing are the reference variables not the actual variables
so the new array indexes would be the same.
------------------------------------------------------------------
================  USING ARRAYLIST  WAY 1 ==============
class Solution {
    static int search(int arr[], int x) {
        // Your code here
        return helper(arr,x,0);
        
    }
    static ArrayList<Integer> list = new ArrayList<>();
    private static int helper(int arr[],int target, int index) //here main funciton is static INT so the helper function should be private static INT
    {
        if(index == arr.length)
        {
            return ; //when we have reached at the end then we are returning the arraylist
        }
        if(arr[index] == target)
        {
            list.add(index);
        }
        else{
            helper(arr,target,index+1);
        }
        
    }
}
------------------------------------------------------------------
------------------------------------------------------------------
------- RECURSION TREE ---------
[1, 2, 2, 3, 4], 2, 0, [])
[2, 2, 3, 4], 2, 1, [1])
[2, 3, 4], 2, 2, [1,2])
[3, 4], 2, 3, [1,2])
[14], 2, 4, [1,2])
[1], 2, 5, [1,2])
------------------------------------------------------------------

================  USING ARRAYLIST  WAY 2 ==============
class Solution {
    static int search(int arr[], int x) {
        // Your code here
        return helper(arr,x,0);
        
    }
 static ArrayList<Integer> helper(int[] arr, int target, int index, ArrayList<Integer> list) {
        if (index == arr.length) {
            return list;
        }
        if (arr[index] == target) {
            list.add(index);
        }
        return helper(arr, target, index + 1, list);
    }
}

------------------------------------------------------------------
------------------------------------------------------------------
arr=[1, 2, 2, 3, 4], Target=2

Step 1:
list()
([1, 2, 2, 3, 4], 2, 0) | arr[0] != 2 so list would be empty

list()
([2, 2, 3, 4], 2, 1))  | arr[1] == 2 so list(1)

list()
(2, 3, 4], 2, 2)  | arr[2] == 2 so list(2)

list()
([3, 4], 2, 2) | arr[3] != 2 so list()

list()
([4], 2, 2) | arr[4] != 2 so list()

answerlist() = 1,2 (ie. appending of all the lists)

================  USING ARRAYLIST WITHIN THE FUNCTION BUT NOT IN FUNCTION CALL ==============

class Solution {
    static int search(int arr[], int x) {
        // Your code here
        return helper(arr,x,0);
        
    }
static ArrayList<Integer> helper(int[] arr, int target, int index) {

        ArrayList<Integer> list = new ArrayList<>(); //HERE FOR EACH FUNCTION CALL A NEW ARRAY LIST IS CREATED 

        if (index == arr.length) {
            return list;
        }

        // this will contain answer for that function call only
        if (arr[index] == target) {
            list.add(index);
        }
        ArrayList<Integer> answerlist = helper(arr, target, index + 1); //CREATING NEW ARRAYLIST TO ADD THE RESULT OF EACH INDIVIDUAL ARRAYLIST OF EACH FUNCTION CALL 

        list.add(answerlist);

        return list;
    }
}
