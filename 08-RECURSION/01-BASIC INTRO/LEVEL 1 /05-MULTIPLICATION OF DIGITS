https://www.geeksforgeeks.org/problems/sum-of-digits1742/1

TIME COMPLEXITY = O(log n)

Input: n = 232
Output 10
Explanation: Mul of 235's digits: 2 * 3 * 2 = 10

232 = fun(23) * 2.    //fun(23) will search for fun(2) * 3
    = fun(2) * 3 * 2 //fun(2) will search for fun(2) * fun(0)
    = 2 * 3 * 2.     //fun(0) would return 1

n = n % 10  -> will give last digit
n = n/10 -> will give the starting digits 
===================== CODE SNIPPET ==========================
class Solution {
    static int sumOfDig(int n) {
        // BASE CONDITION
        if (n==0)
        {
            return 1;
        }
        return ( sumOfDig(n/10) * n%10 );
    }
}

===============================================================
| MulOfDig(0)     | ==> will return 1
|-----------------|
| MulOfDig(3)     | 
|-----------------|
| MulOfDig(23)    |
|-----------------|
| MulOfDig(232)   |
|-----------------|
| main            | 
|_________________|
 stack memory


|                 | 
|-----------------|
| MulOfDig(3)     | 1 * 3 = 3 would be returned
|-----------------|
| MulOfDig(23)    |
|-----------------|
| MulOfDig(232)   |
|-----------------|
| main            | 
|_________________|
 stack memory



|                 | 
|-----------------|
|                 | 
|-----------------|
| MulOfDig(23)    | 2 * 3 = 6 would be returned
|-----------------|
| MulOfDig(232)   |
|-----------------|
| main            | 
|_________________|
 stack memory



|                 | 
|-----------------|
|                 | 
|-----------------|
|                 | 
|-----------------|
| MulOfDig(232)   | 6 * 2 = 12 would be returned to main function 
|-----------------|
| main            | 
|_________________|
 stack memory


====================FULL CODE===================
public class Fact {
    public static void main(String[] args) {
        int ans = sumOfDig(235);
        System.out.println(ans);
    }

static int MulOfDig(int n) {
        // BASE CONDITION
        if (n==0)
        {
            return 1;
        }
        return ( MulOfDig(n/10) * n%10 );
    }
}
===============================================