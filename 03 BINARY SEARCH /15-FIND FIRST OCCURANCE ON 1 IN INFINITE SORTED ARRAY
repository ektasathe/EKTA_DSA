1ST OCCURANCE BINARY SEARCH + SEARCH IN INFINITE SORTED ARRAY


arr = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ) 
target = 15

//REVERSE OF BINARY SEARCH
//START WITH BOX/SIZE OF 2
//DOUBLE THE SIZE OF BOX EACH TIME, ACCORDINGLY UPDATE START AND END INDX

{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ) //size of box =2
 S  E
 M

{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, )  //size of box = 4
       NS M       E
       E+1

{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ) //size of box =8
                     NS           M               E
                     E+1

  public class InfiniteArray {
    public static void main(String[] args) {
      int arr[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, );
      int target = 1;
      System.out.pintln(ans(arr,target));
    }
  Static int ans(int arr[], int target)
  {
    int start = 0;
    int end = 1;
    // condition for the target to lie in the range
    while(target > arr[end])
    {
      start = end;
      end = 2*end;
      //int newstart = end+1;
      //end = end + (end - start + 1) * 2; //2*SIZE OF OLD ARRAY LENGTH //updated end would be [end+double size of box]
      //start = newstart;     
    }
    return binsearch(arr, target, start, end);
  }
    Static int binsearch(int arr[], int target, int start, int end)
      {
            int ans = -1
            int mid = start + (end-start)/2;
            if (target == nums[mid])
            {
                ans = mid ;
                end = mid - 1;
               
            }
            else if(target < nums[mid])
            {
                end = mid -1;
            }
            else if (target > nums[mid])
            {
                start = mid+1;
            }
            return ans;
      }
}

===================================OR========================

https://stackoverflow.com/questions/16546038/a-long-bigger-than-long-max-value

public class Solution {
    
    public static long firstOne()
	{
	    long start =0;
        long end = Long.MAX_VALUE;
        long ans = -1;
        while(start <= end)
        {
            long mid = start + (end-start)/2;
            if (1 == Runner.get(mid))
            {
                ans = mid ;
                end = mid - 1;
               
            }
            else if(1 < Runner.get(mid)). //Test runners in Java are tools that execute test cases written using testing frameworks like JUnit or TestNG
            {
                end = mid -1;
            }
            else if (1 > Runner.get(mid))
            {
                start = mid+1;
            }
            
        }
        return ans;
	}


}
